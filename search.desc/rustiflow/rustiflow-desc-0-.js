searchState.loadedDescShard("rustiflow", 0, "A basic flow that stores the basic features of a flow.\nRepresents the CIC Flow, giving 83 features.\nRepresents the CIDDS Flow, giving 10 features.\nThe output will be written to a CSV file\nRepresents a flow that you can implement yourself.\nRepresents a nfstream inspired flow, giving 69 features.\nFeature extraction from a pcap file\nThe output will be printed to the console\nReal-time feature extraction\nRepresents the Rusti Flow, giving 120 features.\nThe maximum time a flow is allowed to last in seconds …\nThe maximum time a flow is allowed to last in seconds\nSubcommands (Real-time or Pcap)\nConfiguration file path\nWhether to drop contaminant features\nWhether to drop contaminant features\nThe print interval for open flows in seconds (optional)\nThe print interval for open flows in seconds, needs to be …\nInterval (in seconds) for checking and expiring flows in …\nInterval (in seconds) for checking and expiring flows in …\nFile path for output (used if method is Csv)\nFile path for output (used if method is Csv)\nThe feature set to use (required if no config file is …\nThe feature set to use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to export the feature header\nWhether to export the feature header\nThe maximum time with no packets for a flow in seconds …\nThe maximum time with no packets for a flow in seconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput method (required if no config file is provided)\nOutput method\nDisable the graph in TUI when exporting in CSV mode\nDisable the graph in TUI when exporting in CSV mode\nThe numbers of threads to use for processing packets …\nThe numbers of threads to use for processing packets …\nWhether to capture only ingress packets\nThe network interface to capture packets from\nThe relative path to the pcap file\nChecks if enough time has passed to trigger flow …\nCreate and insert a new flow for the given packet.\nExport all flows in the flow map in order of first packet …\nExport all expired flows.\nExports a single flow.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProcesses a packet (either IPv4 or IPv6) and updates the …\nUpdates a flow with a packet and exports flow if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA basic flow that stores the basic features of a flow.\nThe first timestamp of the flow.\nThe reason this flow expired\nThe unique identifier of the flow.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the flow duration in milliseconds.\nCalculates the flow duration in microseconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe destination IP address of the flow.\nThe source IP address of the flow.\nChecks if the flow is finished.\nThe last timestamp of the flow.\nThe destination port of the flow.\nThe source port of the flow.\nThe protocol of the flow.\nRepresents a Flow as exported by CICFlowMeter.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a CIDDS Flow as exported by the like-named …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a Custom Flow, encapsulating various metrics …\nChoose here for an existing flow type or leave the basic …\nReturns the argument unchanged.\nAdd here the additional features.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the rate of bulk bytes in the backward direction per …\nFinalize a BulkState (if it meets the minimum packet …\nFinalize the current bulk (if any) for the given direction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the rate of bulk bytes in the forward direction per …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the bulk logic for a given packet and direction. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of flags in the backward direction.\nReturns the argument unchanged.\nThe number of flags in the forward direction.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for network flow features that can be updated, …\nFinalizes any active state when the flow is terminated\nDumps the current state as a CSV string\nReturns the argument unchanged.\nReturns the CSV headers for this feature\nCalls <code>U::from(self)</code>.\nSafely performs floating point division, returning 0.0 if …\nSafely performs integer division, returning 0.0 if …\nSafely calculates per-second rate, handling zero duration\nUpdates the feature with a new packet\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>Flow</code> defines the behavior of a network flow.\nCloses the flow and performs final calculations.\nDumps the current state of the flow.\nDumps the current state of the flow without contaminant …\nReturns the flow key.\nReturns a first record with the features of the flow.\nReturns a first record with the features of the flow …\nReturns the first timestamp of the flow.\nChecks if the flow is expired.\nConstructs a new <code>Flow</code>.\nUpdates the flow with a new packet.\nRepresents a Nfstream inspired Flow by the popular …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a Rusti Flow, a super-set of features from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a human-readable string describing the flow …\nReturns the argument unchanged.\nUse ports as IANA port categories [‘well-known’, ‘…\nCalls <code>U::from(self)</code>.\nFlushes the writer and closes the output file Explicitly …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates a biflow key\nGenerates a flow key based on IPs, ports, and protocol\nGenerates a flow key based on IPs, ports, and protocol in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates shard channels to FlowTables and spawns processing …\nProcesses and sends packet features to the appropriate …\nStarts the realtime processing of packets on the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")